ZT_LOG(3)
==========
:doctype: manpage

NAME
----
zt_log - general logging utilities

LIBRARY
-------
*zt_log* library (libzt_log, -lzt_log)

SYNOPSIS
--------
#include <zt_log.h>

enum zt_log_level {
    zt_log_emerg = 0,
    zt_log_alert,
    zt_log_critical,
    zt_log_error,
    zt_log_warning,
    zt_log_notice,
    zt_log_info,
    zt_log_debug,
    zt_log_max
};
typedef enum zt_log_level zt_log_level;

typedef struct zt_log_ty  zt_log_ty;

zt_log_level zt_log_set_level( zt_log_ty * log, zt_log_level level );
zt_log_level zt_log_get_level( zt_log_ty * log );

unsigned int zt_log_set_opts( zt_log_ty * log, unsigned int opts );
unsigned int zt_log_get_opts( zt_log_ty * log );

void zt_log_set_debug_info( const char *, int, const char * );
void zt_log_get_debug_info( const char **, int *, const char ** );

zt_log_ty  * zt_log_logger( zt_log_ty * );

void zt_log_lprintf( zt_log_ty *, zt_log_level, const char *, ... );
void zt_log_lstrerror( zt_log_ty *, zt_log_level, int, const char *, ... );
void zt_log_lvprintf( zt_log_ty *, zt_log_level, const char *, va_list );

void zt_log_set_progname(zt_log_ty *, char *);
char * zt_log_get_progname(zt_log_ty *);

zt_log_strerror( level, errnum, ... )
zt_log_printf( level, ... )
zt_log_vprintf( level, fmt, ap )

zt_log_close( zt_log_ty * log );
ZT_LOG_WITH_DEBUG(x)
ZT_LOG_DEBUG_RESET()
ZT_LOG_DEBUG_INFO()
zt_log_dprintf( level, ... )
zt_log_dvprintf( level, fmt, ap )

#if DEBUG
ZT_LOG_XDEBUG(... )
ZT_LOG_XDEBUGV( fmt, ap )

#if NDEBUG
ZT_LOG_NDEBUG(... )
ZT_LOG_NDEBUGV( fmt, ap )

extern zt_log_ty * zt_log_syslog(void);
extern zt_log_ty * zt_log_syslog2(int opt, int facility);

extern zt_log_ty * zt_log_file(char * name, int fopts, int lopts);

extern zt_log_ty * zt_log_stderr(unsigned int opts);


DESCRIPTION
-----------
zt_log provides a generic abstraction around various logging facilities

RETURN VALUES
-------------
*0*::
    success
*<0*::
    failure

EXAMPLES
--------

DIAGNOSTICS
-----------
test


SEE ALSO
--------
test

BUGS
----
test

COPYING
-------
test
